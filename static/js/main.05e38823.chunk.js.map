{"version":3,"sources":["components/Shade.js","components/Shades.js","components/ShadeInput.js","App.js","reportWebVitals.js","index.js"],"names":["Shade","shade","useState","copied","setCopied","useEffect","interval","setInterval","clearInterval","text","hexString","onCopy","className","style","backgroundColor","Shades","color","shades","setShades","isColor","createShades","Values","map","ShadeInput","props","type","onChange","e","onInputChange","target","value","App","setColor","randomColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSA6BeA,EA1BH,SAAC,GAAW,IAAVC,EAAS,EAATA,MAAS,EACMC,oBAAS,GADf,mBACZC,EADY,KACLC,EADK,KAanB,OAXAC,qBAAU,WACN,IAAIC,EAMJ,OALc,GAAVH,IACFG,EAAWC,aAAY,WACrBH,GAAU,KACT,OAEE,WACLI,cAAcF,MAEf,CAACH,IAEF,cAAC,kBAAD,CAAiBM,KAAMR,EAAMS,YAAaC,OAAQ,kBAAMP,GAAU,IAAlE,SACI,qBAAKQ,UAAU,QAAQC,MAAO,CAACC,gBAAgBb,EAAMS,aAArD,SACCP,EACH,sBAAMS,UAAU,SAAhB,qBAEA,+BAAOX,EAAMS,mBCIRK,EArBF,SAAC,GAAW,IAAVC,EAAS,EAATA,MAAS,EACQd,mBAAS,IADjB,mBACbe,EADa,KACLC,EADK,KAEpBb,qBAAU,WACHc,IAAQH,IACPI,MAEN,CAACJ,IACH,IAAMI,EAAa,WACf,IAAMH,EAAQ,IAAII,IAAOL,GAAOC,OAAO,GACvCC,EAAUD,IAGd,OACI,qBAAKL,UAAU,SAAf,SAEOK,EAAOK,KAAI,SAAArB,GAAK,OAAG,cAAC,EAAD,CAAOA,MAAOA,UCNjCsB,EAZI,SAACC,GAChB,OACI,sBAAKZ,UAAU,eAAf,UACA,qBAAKA,UAAU,SAAf,mCACA,uBACAa,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOH,EAAMI,cAAcD,EAAEE,OAAOC,QAC1DlB,UAAU,cAAckB,MAAON,EAAMR,QACjC,qBAAKJ,UAAU,GAAf,kC,gBCeGmB,MAjBf,WAAgB,IAAD,EACW7B,mBAAS,QADpB,mBACRc,EADQ,KACDgB,EADC,KASb,OANF3B,qBAAU,WACR2B,EAASC,SACT,IAKE,sBAAKrB,UAAU,MAAf,UACE,cAAC,EAAD,CAAYI,MAAOA,EAAOY,cALZ,SAACE,GACnBE,EAASF,MAKL,cAAC,EAAD,CAAQd,MAAOA,QCPNkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.05e38823.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\r\n\r\nconst Shade=({shade})=>{\r\n    const [copied,setCopied]=useState(false);\r\n    useEffect(() => {\r\n        let interval;\r\n        if (copied == true) {\r\n          interval = setInterval(() => {\r\n            setCopied(false);\r\n          }, 1500);\r\n        }\r\n        return () => {\r\n          clearInterval(interval);\r\n        };\r\n      }, [copied]);\r\n    return (\r\n        <CopyToClipboard text={shade.hexString()} onCopy={() => setCopied(true)}>\r\n            <div className=\"shade\" style={{backgroundColor:shade.hexString()}}>\r\n            {copied ? (\r\n          <span className=\"copied\">copied!</span>\r\n        ) : (\r\n          <span>{shade.hexString()}</span>\r\n        )}\r\n</div>\r\n        </CopyToClipboard>\r\n    );\r\n};\r\n\r\nexport default Shade;","import React, { useState,useEffect } from 'react';\r\nimport Values from 'values.js';\r\nimport isColor from 'is-color';\r\nimport Shade from './Shade';\r\n\r\nconst Shades=({color})=>{\r\n    const [shades, setShades] = useState([]);\r\n    useEffect(()=>{\r\n        if(isColor(color)){\r\n            createShades();\r\n        }\r\n    },[color]);\r\n    const createShades=()=>{\r\n        const shades= new Values(color).shades(1);\r\n        setShades(shades);\r\n    }\r\n\r\n    return (\r\n        <div className=\"shades\">\r\n           {\r\n               shades.map(shade=>(<Shade shade={shade}/>))\r\n           }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Shades\r\n","import React from 'react';\r\n\r\nconst ShadeInput = (props)=>{\r\n    return (\r\n        <div className=\"shade-search\">\r\n        <div className=\"emojis\">Color Shade Generator</div>\r\n        <input\r\n        type=\"text\" onChange={(e) => props.onInputChange(e.target.value)}\r\n        className=\"shade-input\" value={props.color}/>\r\n            <div className=\"\">By Tasikul Islam</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShadeInput;\r\n","import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport Shades from \"./components/Shades\";\nimport ShadeInput from \"./components/ShadeInput\";\nimport randomColor from \"randomcolor\";\n\n\nfunction App() {\nconst [color, setColor] = useState(\"#000\");\n\nuseEffect(()=>{\n  setColor(randomColor());\n},[])\nconst onInputChange=(value)=>{\n  setColor(value);\n}\n  return (\n    <div className=\"App\">\n      <ShadeInput color={color} onInputChange={onInputChange}/>\n      <Shades color={color}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}